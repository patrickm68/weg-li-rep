swagger: "2.0"
info:
  description: "1, 2, 3 - üì∏ üìù ‚úä Macht die Bahn frei!"
  version: "1.0.0"
  title: "weg-li"
  termsOfService: "https://www.weg-li.de/"
  contact:
    email: "peter@weg-li.de"
host: "www.weg-li.de"
basePath: "/api"
tags:
- name: "notice"
  description: "Everything about your Notices"
- name: "bulk_upload"
  description: "Everything about your BulkUploads"
- name: "user"
  description: "Everything about your Users"
schemes:
- "https"
paths:
  /notices:
    post:
      tags:
      - "notice"
      summary: "Add a new Notice to the store"
      description: ""
      operationId: "addNotice"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Notice object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Notice"
      responses:
        405:
          description: "Invalid input"
      security:
      - noticestore_auth:
        - "write:notices"
        - "read:notices"
    put:
      tags:
      - "notice"
      summary: "Update an existing notice"
      description: ""
      operationId: "updatenotice"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Notice object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Notice"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Notice not found"
        405:
          description: "Validation exception"
      security:
      - noticestore_auth:
        - "write:notices"
        - "read:notices"
  /notice/findByStatus:
    get:
      tags:
      - "notice"
      summary: "Finds notices by status"
      description: "Multiple status values can be provided with comma separated strings"
      operationId: "findnoticesByStatus"
      produces:
      - "application/json"
      parameters:
      - name: "status"
        in: "query"
        description: "Status values that need to be considered for filter"
        required: true
        type: "array"
        items:
          type: "string"
          enum:
          - "available"
          - "pending"
          - "sold"
          default: "available"
        collectionFormat: "multi"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Notice"
        400:
          description: "Invalid status value"
      security:
      - noticestore_auth:
        - "write:notices"
        - "read:notices"
  /notice/{notice_token}:
    get:
      tags:
      - "notice"
      summary: "Find Notice by ID"
      description: "Returns a single notice"
      operationId: "getNoticeById"
      produces:
      - "application/json"
      parameters:
      - name: "notice_token"
        in: "path"
        description: "ID of Notice to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Notice"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Notice not found"
      security:
      - api_key: []
  /user/login:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        400:
          description: "Invalid username/password supplied"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /user/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        400:
          description: "Invalid user supplied"
        404:
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
securityDefinitions:
  noticestore_auth:
    type: "oauth2"
    authorizationUrl: "http://noticestore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:notices: "modify notices in your account"
      read:notices: "read your notices"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Notice:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      notice_token:
        type: "integer"
        format: "int64"
      quantity:
        type: "integer"
        format: "int32"
      shipDate:
        type: "string"
        format: "date-time"
      status:
        type: "string"
        description: "Order Status"
        enum:
        - "placed"
        - "approved"
        - "delivered"
      complete:
        type: "boolean"
        default: false
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
