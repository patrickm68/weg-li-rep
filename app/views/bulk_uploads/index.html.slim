- set_title t('navigation.bulk_uploads')
- set_crumbs t('navigation.bulk_uploads') => url_for, 'Übersicht' => url_for

= form_tag bulk_bulk_uploads_path, method: :post do
  .panel.panel-default
    .panel-heading
      = link_to new_bulk_upload_path, class: 'btn btn-sm btn-success', title: 'Meldung erfassen' do
        span.glyphicon.glyphicon-cloud-upload>
        | Massen-Upload starten
    .table-responsive
      table.table.table-striped.table-hover
        thead
          tr
            th
            th= BulkUpload.human_attribute_name(:photos)
            th
              => BulkUpload.human_attribute_name(:created_at)
              - if params.dig(:order, :column) == 'created_at'
                - if params.dig(:order, :value) == 'ASC'
                  = link_to url_for(@table_params.deep_merge(order: {column: :created_at, value: 'DESC'}))
                    span.glyphicon.glyphicon-arrow-up.smaller
                - else
                  = link_to url_for(@table_params.deep_merge(order: {column: :created_at, value: 'ASC'}))
                    span.glyphicon.glyphicon-arrow-down.smaller
                = link_to url_for(@table_params.merge(order: {}))
                  span.text-muted.glyphicon.glyphicon-remove.smaller
              - else
                = link_to url_for(@table_params.deep_merge(order: {column: :created_at, value: 'ASC'}))
                  span.glyphicon.glyphicon-arrow-up.smaller.text-muted
            th
              .dropdown
                button class="btn btn-default btn-xs dropdown-toggle" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="true"
                  => params[:filter] ? BulkUpload.human_attribute_name(params[:filter][:status]) : BulkUpload.human_attribute_name(:status)
                  span.caret
                ul.dropdown-menu aria-labelledby="dropdownMenu1"
                  - BulkUpload.statuses.keys.each do |status|
                    li
                      = link_to url_for(@table_params.merge(filter: {status: status})) do
                        = render 'bulk_upload_status', status: status
                  li role="separator" class="divider"
                  li= link_to 'kein Filter', url_for(@table_params.merge(filter: nil))
        tbody
          - if @bulk_uploads.present?
            - @bulk_uploads.each do |bulk_upload|
              tr
                td
                  .btn-group.btn-group-checkbox.dropdown
                    label.btn.btn-sm
                      = check_box_tag "selected[]", bulk_upload.id, false, class: 'select-all checkbox-addon'
                    = render 'bulk_upload_actions', bulk_upload: bulk_upload
                td
                  - if bulk_upload.photos.present?
                    = link_to([:edit, bulk_upload]) do
                      - bulk_upload.photos.first(3).each do |photo|
                        = image_tag(url_for_photo(photo, size: :thumb), class: 'index-photo')
                  - else
                    = link_to('-', [:edit, bulk_upload])
                td= d(bulk_upload.created_at)
                td= render 'bulk_upload_status', status: bulk_upload.status

          - else
            tr
              td(colspan=7) Es wurden keine Uploads gefunden
    .panel-footer
      .btn-group.btn-group-checkbox.dropup
        label.btn.btn-sm
          .hidden= check_box_tag :select_all, '', false, onchange: "$('.select-all').prop('checked', $(this).prop('checked'))"
          | alle auswählen

        button type="button" class="btn btn-default btn-sm dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"
          span> Aktionen
          span.caret

        ul.dropdown-menu
          li
            = button_tag name: :bulk_action, value: :destroy, type: :submit, class: 'btn btn-sm btn-link', data: {confirm: 'Die Massen-Uploads werden endgültig gelöscht'}
              span.glyphicon.glyphicon-trash>
              span Auswahl löschen

.text-center
  = paginate @bulk_uploads

.well.well-sm
  h5 Status für Massen-Uploads
  dl.dl-horizontal
    - BulkUpload.statuses.keys.each do |status|
      dt= render 'bulk_upload_status', status: status
      dd= t(status, scope: 'bulk_uploads.status-hints', default: '')
