- set_title t('navigation.bulk_uploads')

= render('jobs_hint')

- if @bulk_upload.importing?
  - info = 'Die Beweisfotos aus dem Album werden im Hintergrund heruntergeladen. Dies kann etwas Zeit in Anspruch nehmen.'
  - note = 'Import läuft'
  = render('components/reload', note: note, info: info)
- elsif @bulk_upload.processing?
  - info = 'Die Beweisfotos im Massen-Upload werden im Hintergrund verarbeitet in verschiedenen Größen, z.B. als Thumbnails, bereitgestellt. Dies kann etwas Zeit in Anspruch nehmen.'
  - note = "Verarbeitung läuft"
  = render('components/reload', note: note, info: info)

- elsif @photos.present?

  - if current_user.autosuggest.zero?
    - message = "Sollen Vorschläge automatisch übernommen werden, können die Auto-Suggest Einstellungen #{link_to('im Profil', edit_user_path)} geändert werden."
    = render('application/flash/alert', type: 'info', message: message)

  .well.well-sm.callout-primary
    | Mehrere Beweisfotos gruppiert nach Vergehen ins obere Feld ziehen, oder mit Hilfe des
    span.glyphicon.glyphicon-move<>
    | Button dorthin bewegen und anschließend eine neue Meldung anlegen.

  = form_with model: @bulk_upload do |form|
    = hidden_field_tag :order_column, @order_column
    = hidden_field_tag :order_direction, @order_direction
    .row
      .col-lg-12
        fieldset Beweisfotos für neue Meldung
    .row
      .col-lg-8
        = render 'photo_list', bulk_upload: @bulk_upload, photos: [@photos.first]
      .col-lg-4
        p
          = form.button type: :submit, class: "btn btn-success btn-block"
            span.glyphicon.glyphicon-plus>
            | neue Meldung anlegen
        .well
          p
            = link_to url_for(params.to_unsafe_hash), class: "btn btn-sm btn-default btn-block"
              span.glyphicon.glyphicon-refresh>
              | Beweisfotos aktualisieren

          button type="button" class="btn btn-default btn-sm btn-block dropdown-toggle" data-toggle="dropdown" aria-expanded="false"
            | sortiert #{@order_direction == 'asc' ? '⬆' : '⬇'} #{@order_column == 'filename' ? 'nach Dateinamen' : 'wie hochgeladen'} <span class="caret"></span>
          ul.dropdown-menu
            li
              = link_to '⬆ nach Dateinamen', url_for(order_column: 'filename', order_direction: 'asc')
              = link_to '⬇ nach Dateinamen', url_for(order_column: 'filename', order_direction: 'desc')
              = link_to '⬆ wie hochgeladen', url_for(order_column: 'created_at', order_direction: 'asc')
              = link_to '⬇ wie hochgeladen', url_for(order_column: 'created_at', order_direction: 'desc')

  .row
    .col-lg-12
      fieldset Verbleibende Beweisfotos
  .row
    .col-lg-12
      = render 'photo_list', bulk_upload: @bulk_upload, photos: @photos - [@photos.first]

  javascript:
    function ziehen(ev) {
      ev.dataTransfer.setData('text', ev.target.id);
    }

    function ablegenErlauben(ev, el) {
      ev.preventDefault();
      el.classList.add('well-active');
    }

    function ablegenLeave(ev, el) {
      el.classList.remove('well-active');
    }

    function ablegenEnter(ev, el) {
    }

    function ablegen(ev, el) {
      el.classList.remove('well-active');
      ev.preventDefault();
      var data = ev.dataTransfer.getData('text');
      el.children[0]?.appendChild(document.getElementById(data));
    }

    function ablegenMove(id) {
      const el = document.getElementById(id);
      const first = document.getElementsByClassName('droppable-list')[0];
      const last = document.getElementsByClassName('droppable-list')[1];
      if (Array.from(first.childNodes).includes(el)) {
        last?.appendChild(el);
      } else {
        first?.appendChild(el);
      }
    }

  hr.spacer

  .row
    .col-lg-3
      = form_with model: @bulk_upload do |form|
        = form.submit 'Pro Beweisfoto eine neue Meldung', name: 'one_per_photo', class: "btn btn-primary btn-block"
    .col-lg-9
      .well.well-sm.callout-primary Sollte jedes Beweisfoto zu einem eigenen Vergehen gehören, dann hier pro Beweisfoto jeweils eine neue Meldung erzeugen.

  - if @bulk_upload.notices.present?
    hr.spacer

    .panel.panel-default
      = render 'notice_list', notices: @bulk_upload.notices

- else
  - if @bulk_upload.error?
    .well.well-sm.callout-danger
      small= @bulk_upload.error_message
  - else
    .well.well-sm.callout-primary Alle Beweisfotos wurden bereits zugeordnet und in neue Meldungen überführt.

    .panel.panel-default
      = render 'notice_list', notices: @bulk_upload.notices
