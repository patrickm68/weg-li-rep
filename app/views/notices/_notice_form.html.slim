.well.well-sm.callout-primary= t('notices.steps.infos.description')

.row
  .col-lg-4
    .form-group
      - registration_data = notice.data_sets.google_vision.flat_map { |google_vision| google_vision.registrations }
      - registrations = Vehicle.by_likelyhood(registration_data)
      - registrations = notice.data_sets.car_ml.map(&:registrations).concat(registrations).concat([notice.registration]).compact.flatten.uniq
      = form.label :registration, class: "control-label control-label-required"
      = form.select :registration, registrations, { include_blank: 'z.B. HH SV 1887' }, { class: "form-control", required: true, data: {'select2-disabled' => true} }
      = render('auto_suggest', notice: notice)
      .input-group#pick_registration
        - registrations.each do |registration|
          a(href="#" onclick="$('#notice_registration').val('#{registration}').trigger('change'); $('#pick_registration').fadeOut(); return false;")
              span.label.label-default.label-picker(title=registration)
                span(style="text-decoration:none")=> registration
                span.glyphicon.glyphicon-circle-arrow-left

  .col-lg-4
    .form-group
      = form.label :brand, class: "control-label"
      = form.select :brand, Vehicle.brands, { include_blank: 'Marke Auswählen' }, { class: "form-control" }
      .input-group#pick_brand
        - brands = notice.data_sets.google_vision.flat_map { |google_vision| google_vision.brands }
        - brands = Vehicle.by_likelyhood(brands)
        - brands = notice.data_sets.car_ml.map(&:brands).concat(brands).compact.flatten.uniq
        - brands.each do |brand|
            a(href="#" onclick="$('#notice_brand').val('#{brand}').trigger('change'); $('#pick_brand').fadeOut(); return false;")
              span.label.label-default.label-picker(title=brand)
                span=> brand
                span.glyphicon.glyphicon-circle-arrow-left

  .col-lg-4
    .form-group
      = form.label :color, class: "control-label"
      = form.select :color, Vehicle.colors.map { |color| [t(color, scope: "activerecord.attributes.notice.colors"), color] }, { include_blank: 'Farbe Auswählen' }, { class: "form-control" }
      .input-group#pick_color
        - colors = notice.data_sets.google_vision.flat_map { |google_vision| google_vision.colors }
        - colors = Vehicle.by_likelyhood(colors)
        - colors = notice.data_sets.car_ml.map(&:colors).concat(colors).compact.flatten.uniq
        - colors.each do |color|
            a(href="#" onclick="$('#notice_color').val('#{color}').trigger('change'); $('#pick_color').fadeOut(); return false;")
              span.label.label-default.label-picker(title=color)
                span=> t(color, scope: "activerecord.attributes.notice.colors")
                span.glyphicon.glyphicon-circle-arrow-left

.row
  = form.hidden_field(:latitude)
  = form.hidden_field(:longitude)
  .col-lg-4
    .form-group
      = form.label :address, class: "control-label control-label-required"
      .input-group
        = form.text_field :street, placeholder: 'z.B. Sylvesterallee 7', class: "form-control", required: true

        a.input-group-addon(href="#" data-toggle="modal" data-target="#modal_map")
          span.glyphicon.glyphicon-map-marker
        = render('picker_modal', notice: notice)

      - addresses = notice.data_sets.geocoder.map { |data_set| data_set.address }.compact
      .input-group#pick_address
        - addresses.each do |address|
          a(href="#" onclick="$('#notice_street').val('#{address[:street]}'); $('#notice_city').val('#{address[:city]}'); $('#notice_zip').val('#{address[:zip]}'); $('#notice_latitude').val('#{address[:latitude]}'); $('#notice_longitude').val('#{address[:longitude]}'); $('#pick_address').fadeOut(); return false;")
              span.label.label-default.label-picker(title=address[:street])
                span(style="text-decoration:none")=> address[:street]
                span.glyphicon.glyphicon-circle-arrow-left

  .col-lg-4
    .form-group
      = form.label :city, class: "control-label control-label-required"
      = form.text_field :city, placeholder: 'z.B. Hamburg', class: "form-control", required: true

  .col-lg-4
    .form-group
      = form.label :zip, class: "control-label control-label-required"
      = form.text_field :zip, placeholder: 'z.B. 22525', class: "form-control", required: true, maxlength: 5, pattern: '\d{5}'

.row
  .col-lg-12
    .form-group
      = form.label :location, class: "control-label"
      = form.text_field :location, placeholder: 'z.B. Ecke Dorfstraße / Gegenüber vom Bäcker', class: "form-control"
      = hint do
        | Bei Verstößen z.B. im Kreuzungsbereich, oder falls eine Hausnummer fehlt, wird dieser Hinweis der Adresse hinzugefügt.

.row
  .col-lg-8
    .form-group
      - nearest_charges = notice.nearest_charges
      = form.label :charge, class: "control-label control-label-required"
      = form.select :charge, nearest_charges.map { |entry| entry['charge'] }.concat(Charge.plain_charges).uniq, { include_blank: 'Verstoß Auswählen' }, { class: "form-control", required: true }
      .input-group#pick_charge
        - if nearest_charges.present?
          - nearest_charge = nearest_charges.first['charge']
          a(href="#" onclick="$('#notice_charge').val('#{nearest_charge}').trigger('change'); $('#pick_charge').fadeOut(); return false;")
            span.label.label-default.label-picker(title=nearest_charge)
              span=> nearest_charge
              span.glyphicon.glyphicon-circle-arrow-left

  .col-lg-4
    .form-group
      = form.label :severity, class: "control-label control-label-required"
      = form.select :severity, Notice.severities.keys.map { |key| [Notice.human_attribute_name(key), key]}, { include_blank: 'Behinderung Auswählen' }, { class: "form-control", required: true }
      = hint do
        | Beweisfotos und Hinweise zur Behinderung/Gefährdung beifügen

.row
  .col-lg-8
    .form-group
      = form.label :date, class: "control-label control-label-required"
      .input-group
        = form.date_field :date_date, class: "form-control", required: true
        label.input-group-addon(for="notice_date_date")
          span.glyphicon.glyphicon-calendar
        = form.time_field :date_time, class: "form-control", required: true, value: form.object.date_time&.strftime('%H:%M')
        label.input-group-addon(for="notice_date_time")
          span.glyphicon.glyphicon-time

      - date_times = notice.data_sets.exif.map { |data_set| data_set.date_time }.compact.uniq
      - date_times = notice.photos.map { |photo| AnalyzerJob.time_from_filename(photo.filename.to_s) }.compact.uniq if date_times.blank?
      - date_times = date_times.sort
      .input-group#pick_date
        - date_times.each do |date_time|
          a(href="#" onclick="$('#notice_date_date').val('#{date_time.strftime('%Y-%m-%d')}'); $('#notice_date_time').val('#{date_time.strftime('%H:%M')}'); $('#pick_date').fadeOut(); return false;")
              span.label.label-default.label-picker(title=l(date_time))
                span(style="text-decoration:none")=> l(date_time, format: :short)
                span.glyphicon.glyphicon-circle-arrow-left

  .col-lg-4
    .form-group
      = form.label :duration, class: "control-label control-label-required"
      = form.select :duration, Vehicle.durations, { include_blank: 'Dauer Auswählen' }, { class: "form-control", required: true }

      - date_times = notice.data_sets.exif.map { |data_set| data_set.date_time }.compact.uniq
      - date_times = notice.photos.map { |photo| AnalyzerJob.time_from_filename(photo.filename.to_s) }.compact.uniq if date_times.blank?
      - sorted_dates = date_times.sort
      - duration = (sorted_dates.last.to_i - sorted_dates.first.to_i)
      - duration = Vehicle.durations.to_h.values.reverse.find { |d| duration >= d.minutes }
      - if duration
        .input-group#pick_duration
          a(href="#" onclick="$('#notice_duration').val('#{duration}').trigger('change'); $('#pick_duration').fadeOut(); return false;")
              span.label.label-default.label-picker(title=Vehicle.durations[duration])
                span(style="text-decoration:none")=> Vehicle.durations.to_h.invert[duration]
                span.glyphicon.glyphicon-circle-arrow-left

.row
  .col-lg-8
    .form-group
      = form.label :note, class: "control-label"
      = form.text_area :note, placeholder: 'z.B. konkrete Behinderung / Gefährdung beschreiben', class: "form-control"
      = hint do
        .pull-right= render('snippet_buttons', notes: current_user.snippets.pluck(:content))
        | Für die Hinweise können #{link_to 'Texte als Vorlagen', snippets_path}  hinterlegt werden.

  .col-lg-4
    .form-group
      label.control-label Details
      - Notice.details.each do |flag|
        .checkbox
          label
            = form.check_box flag
            span= t(flag, scope: "activerecord.attributes.notice.flags")
