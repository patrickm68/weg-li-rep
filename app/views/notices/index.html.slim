- set_title t('navigation.notices')
- set_crumbs t('navigation.notices') => notices_path, 'Übersicht' => url_for

= render 'activation_popup'

- if current_user.notices.any?
  .panel.panel-default
    .panel-heading
      .row
        .col-xs-8
          = link_to new_notice_path, class: 'btn btn-sm btn-success', title: 'Meldung erfassen' do
            span.glyphicon.glyphicon-plus>
            | Meldung erfassen
        .col-xs-4.text-right
          button.btn.btn-default.btn-sm.dropdown-toggle type="button" data-toggle="dropdown"
            | Suche <span class="caret"></span>
          ul.dropdown-menu.dropdown-menu-right
            = form_tag(url_for, method: :get, class: 'form-dropdown', autocomplete: :off)
              .input-group.input-group-sm
                = hidden_field_tag('order[column]', @table_params[:order][:column])
                = hidden_field_tag('order[value]', @table_params[:order][:value])
                = hidden_field_tag('filter[status]', @table_params[:filter][:status])
                = text_field_tag('search[term]', @table_params[:search][:term], placeholder: 'z.B. HH SV 1887', class: 'form-control')
                span.input-group-btn
                  = button_tag(class: "btn btn-default btn-sm")
                    span.glyphicon.glyphicon-search
            - if @table_params[:search][:term].present?
              li.divider
              li
                = link_to url_for(@table_params.merge(search: nil))
                  span.glyphicon.glyphicon-remove>
                  | ohne Suche

    = form_tag bulk_notices_path, method: :post do
      .table-responsive
        table.table.table-striped.table-hover
          thead
            tr
              th
              th
                => Notice.human_attribute_name(:registration)
                - if params.dig(:order, :column) == 'registration'
                  - if params.dig(:order, :value) == 'ASC'
                    = link_to url_for(@table_params.deep_merge(order: {column: :registration, value: 'DESC'}))
                      span.glyphicon.glyphicon-arrow-up.smaller
                  - else
                    = link_to url_for(@table_params.deep_merge(order: {column: :registration, value: 'ASC'}))
                      span.glyphicon.glyphicon-arrow-down.smaller
                  = link_to url_for(@table_params.merge(order: {}))
                    span.text-muted.glyphicon.glyphicon-remove.smaller
                - else
                  = link_to url_for(@table_params.deep_merge(order: {column: :registration, value: 'ASC'}))
                    span.glyphicon.glyphicon-arrow-down.smaller.text-muted
              th= Notice.human_attribute_name(:photos)
              th
                => Notice.human_attribute_name(:created_at)
                - if params.dig(:order, :column) == 'created_at'
                  - if params.dig(:order, :value) == 'ASC'
                    = link_to url_for(@table_params.deep_merge(order: {column: :created_at, value: 'DESC'}))
                      span.glyphicon.glyphicon-arrow-up.smaller
                  - else
                    = link_to url_for(@table_params.deep_merge(order: {column: :created_at, value: 'ASC'}))
                      span.glyphicon.glyphicon-arrow-down.smaller
                  = link_to url_for(@table_params.merge(order: {}))
                    span.text-muted.glyphicon.glyphicon-remove.smaller
                - else
                  = link_to url_for(@table_params.deep_merge(order: {column: :created_at, value: 'ASC'}))
                    span.glyphicon.glyphicon-arrow-down.smaller.text-muted
              th
                .dropdown
                  button class="btn btn-default btn-xs dropdown-toggle" type="button" data-toggle="dropdown"
                    - current_status_filter = params.dig(:filter, :status)
                    => current_status_filter.present? ? Notice.human_attribute_name(current_status_filter) : Notice.human_attribute_name(:status)
                    span.caret
                  ul.dropdown-menu.dropdown-menu-right
                    - Notice.statuses.keys.each do |status|
                      li
                        = link_to url_for(@table_params.merge(filter: {status: status})) do
                          = render 'status', status: status
                    li role="separator" class="divider"
                    li
                      = link_to url_for(@table_params.merge(filter: nil))
                        span.glyphicon.glyphicon-remove>
                        | kein Filter
          tbody
            - if @notices.present?
              - @notices.each do |notice|
                tr
                  td
                    .btn-group.btn-group-checkbox.dropdown
                      label.btn.btn-sm
                        = check_box_tag "selected[]", notice.id, false, class: 'select-all'
                      = render 'actions', notice: notice
                  td
                    - if notice.incomplete?
                      = link_to([:edit, notice]) do
                        = render 'status', status: :incomplete
                    - else
                      = link_to(notice)
                        span.label.label-license
                          span= notice.registration
                  td
                    = link_to(notice) do
                      - notice.photos.each do |photo|
                        = image_tag(url_for_photo(photo, size: :thumb), class: 'index-photo')
                  td= link_to(d(notice.created_at), notice)
                  td= render 'status', status: notice.status

            - else
              tr
                td(colspan=7)= t('notices.nothing_found')
      .panel-footer
        .row
          .col-lg-12
            .btn-group.btn-group-checkbox.dropup
              label.btn.btn-sm
                => check_box_tag :select_all, '', false, onchange: "$('.select-all').prop('checked', $(this).prop('checked'))"
                | alle auswählen

              button type="button" class="btn btn-default btn-sm dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"
                span.caret
                span.sr-only Aktionen
              ul.dropdown-menu
                li
                  = button_tag name: :bulk_action, value: :analyze, type: :submit, class: 'btn btn-sm btn-link'
                    span.glyphicon.glyphicon-hourglass>
                    span Auswahl analysieren
                li
                  = button_tag name: :bulk_action, value: :share, type: :submit, class: 'btn btn-sm btn-link'
                    span.glyphicon.glyphicon-share>
                    span Auswahl melden
                li
                  = button_tag name: :bulk_action, value: :destroy, type: :submit, class: 'btn btn-sm btn-link', data: {confirm: 'Die Meldungen werden endgültig gelöscht'}
                    span.glyphicon.glyphicon-trash>
                    span Auswahl löschen

  .text-center
    = paginate @notices

  .well.well-sm
    strong Aktionen für Meldungen
    small
      ul.list-inline
        li
          span.glyphicon.glyphicon-eye-open>
          | Meldung ansehen
        li
          span.glyphicon.glyphicon-edit>
          | Meldung bearbeiten
        li
          span.glyphicon.glyphicon-duplicate>
          | Meldung duplizieren
        li
          span.glyphicon.glyphicon-trash>
          | Meldung löschen
        li
          span.glyphicon.glyphicon-share>
          | Anzeige erstatten
        li
          span.glyphicon.glyphicon-globe>
          | Anzeige ansehen
        li
          span.glyphicon.glyphicon-minus-sign>
          | Anzeige deaktivieren
        li
          span.glyphicon.glyphicon-plus-sign>
          | Anzeige aktivieren

    strong Status für Meldungen
    - (Notice.statuses.keys + [:incomplete]).each do |status|
      p= render 'status', status: status, legend: true

- else
  = render 'blank_slate'
