- set_title t('navigation.notices')
- set_crumbs t('navigation.notices') => notices_path, 'Übersicht' => url_for

= render 'activation_popup'

- if current_user.notices.any?
  .well
    - total_count = current_user.notices.count
    - open_count = current_user.notices.open.count
    - shared_count = current_user.notices.shared.count
    - incomplete_count = current_user.notices.incomplete.count
    - if total_count == shared_count
      |
        Du hast bisher #{total_count} Meldungen erfasst, davon sind alle #{shared_count} #{link_to render('status', status: 'shared'), url_for(@table_params.merge(filter: {status: 'shared'}))}.
    - else
      span> Du hast bisher #{total_count} Meldungen erfasst, davon sind #{open_count} #{link_to render('status', status: 'open'), url_for(@table_params.merge(filter: {status: 'open'}))} und #{shared_count} #{link_to render('status', status: 'shared'), url_for(@table_params.merge(filter: {status: 'shared'}))}.
      - if incomplete_count > 0
        span> Von den offenen Meldungen sind #{incomplete_count} noch #{link_to render('status', status: 'incomplete'), url_for(@table_params.merge(filter: {incomplete: true}))}.
      span Die Frist der Verfolgungsverjährung beträgt bei Ordnungswidrigkeiten lediglich drei Monate, bringe die Meldungen also schnellstmöglichst zur Anzeige, damit sie fristgerecht bearbeitet werden können.
  .panel.panel-default
    .panel-heading
      .row
        .col-xs-8
          = link_to new_notice_path, class: 'btn btn-sm btn-success', title: 'Meldung erfassen'
            span.glyphicon.glyphicon-plus>
            | Meldung erfassen
        .col-xs-4.text-right
          button.btn.btn-default.btn-sm.dropdown-toggle type="button" data-toggle="dropdown"
            | <span class="glyphicon glyphicon-search"></span> Suche <span class="caret"></span>
          ul.dropdown-menu.dropdown-menu-right
            li
              = form_tag(url_for, method: :get, class: 'form-dropdown', autocomplete: :off)
                .input-group.input-group-sm
                  = hidden_field_tag('order[column]', @table_params[:order][:column])
                  = hidden_field_tag('order[value]', @table_params[:order][:value])
                  = hidden_field_tag('filter[status]', @table_params[:filter][:status])
                  = text_field_tag('search[term]', @table_params[:search][:term], placeholder: 'z.B. HH SV 1887', class: 'form-control', autofocus: true)
                  span.input-group-btn
                    = button_tag(class: "btn btn-default btn-sm")
                      span.glyphicon.glyphicon-search
            - if @table_params[:search][:term].present?
              li.divider
              li
                = link_to url_for(@table_params.merge(search: nil))
                  span.glyphicon.glyphicon-remove>
                  | ohne Suche

    = form_tag bulk_notices_path, method: :post
      .table-responsive.table-padding
        table.table.table-striped.table-hover
          thead
            tr
              th
              th
              th= Notice.human_attribute_name(:registration)
              th
                => Notice.human_attribute_name(:created_at)
                - if params.dig(:order, :column) == 'created_at'
                  - if params.dig(:order, :value) == 'ASC'
                    = link_to url_for(@table_params.deep_merge(order: {column: :created_at, value: 'DESC'}))
                      span.glyphicon.glyphicon-arrow-up.smaller
                  - else
                    = link_to url_for(@table_params.deep_merge(order: {column: :created_at, value: 'ASC'}))
                      span.glyphicon.glyphicon-arrow-down.smaller
                  = link_to url_for(@table_params.merge(order: {}))
                    span.text-muted.glyphicon.glyphicon-remove.smaller
                - else
                  = link_to url_for(@table_params.deep_merge(order: {column: :created_at, value: 'ASC'}))
                    span.glyphicon.glyphicon-arrow-up.smaller.text-muted
              th
                => Notice.human_attribute_name(:date)
                - if params.dig(:order, :column) == 'date'
                  - if params.dig(:order, :value) == 'ASC'
                    = link_to url_for(@table_params.deep_merge(order: {column: :date, value: 'DESC'}))
                      span.glyphicon.glyphicon-arrow-up.smaller
                  - else
                    = link_to url_for(@table_params.deep_merge(order: {column: :date, value: 'ASC'}))
                      span.glyphicon.glyphicon-arrow-down.smaller
                  = link_to url_for(@table_params.merge(order: {}))
                    span.text-muted.glyphicon.glyphicon-remove.smaller
                - else
                  = link_to url_for(@table_params.deep_merge(order: {column: :date, value: 'ASC'}))
                    span.glyphicon.glyphicon-arrow-up.smaller.text-muted
              th
                .dropdown
                  button class="btn btn-default btn-xs dropdown-toggle" type="button" data-toggle="dropdown"
                    - current_status_filter = params.dig(:filter, :status)
                    => current_status_filter.present? ? Notice.human_attribute_name(current_status_filter) : Notice.human_attribute_name(:status)
                    span.caret
                  ul.dropdown-menu.dropdown-menu-right
                    - Notice.statuses.keys.each do |status|
                      li
                        = link_to url_for(@table_params.merge(filter: {status: status}))
                          = render 'status', status: status
                    li role="separator" class="divider"
                    li
                      = link_to url_for(@table_params.merge(filter: nil))
                        span.glyphicon.glyphicon-remove>
                        | kein Filter
          tbody
            - if @notices.present?
              - @notices.each do |notice|
                tr
                  td
                    label.btn-sm
                      = check_box_tag "selected[]", notice.id, false, class: 'select-all'
                    .btn-group.dropdown
                      = render 'actions', notice: notice
                  td
                    = link_to_notice(notice) do
                      - notice.photos.first(1).each do |photo|
                        = image_tag(url_for_photo(photo, size: :preview), class: 'index-photo')
                  td
                    = link_to_notice(notice) do
                      - if notice.incomplete?
                        = render 'status', status: :incomplete
                      - else
                        = registration_label(notice.registration)
                  td(nowrap)
                    = link_to_notice(notice) do
                      = d(notice.created_at)
                  td(nowrap)
                    = link_to_notice(notice) do
                      = d(notice.date, default: '-')
                  td
                    = link_to_notice(notice) do
                      = render 'status', status: notice.status
            - else
              tr
                td(colspan=7)= t('notices.nothing_found')
      .panel-footer
        .row
          .col-lg-12
            .btn-group.btn-group-checkbox.dropup
              label.btn.btn-sm
                .hidden= check_box_tag :select_all, '', false, onchange: "$('.select-all').prop('checked', $(this).prop('checked'))"
                | alle auswählen

              button type="button" class="btn btn-default btn-sm dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"
                span> Aktionen
                span.caret
              ul.dropdown-menu
                li
                  = button_tag name: :bulk_action, value: :share, type: :submit, class: 'btn btn-link', data: {confirm: 'Bei offenen Meldungen jetzt Anzeige erstatten?'}
                    span.glyphicon.glyphicon-share>
                    span bei Auswahl Anzeigen erstatten
                li
                  = button_tag name: :bulk_action, value: :pdf, type: :submit, class: 'btn btn-link', data: {confirm: 'Die vollständigen Meldungen als PDF per E-Mail zuschicken?'}
                    span.glyphicon.glyphicon-save-file>
                    span bei Auswahl als PDF zuschicken
                li
                  = button_tag name: :bulk_action, value: :status, type: :submit, class: 'btn btn-link', data: {confirm: 'Die vollständigen Meldungen als gemeldet markieren?'}
                    span.glyphicon.glyphicon-status-shared>
                    span bei Auswahl 'gemeldet' markieren
                li
                  = button_tag name: :bulk_action, value: :destroy, type: :submit, class: 'btn btn-link', data: {confirm: 'Die Meldungen endgültig löschen?'}
                    span.glyphicon.glyphicon-trash>
                    span bei Auswahl endgültig löschen

  .text-center
    = paginate @notices

  dl.dl-horizontal.well
    - (Notice.statuses.keys + [:incomplete]).each do |status|
      dt= render 'status', status: status
      dd= t(status, scope: 'notices.status-hints', default: '')

- else
  = render 'blank_slate'
